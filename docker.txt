docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=root mysql:5.7

docker 环境端重启：
systemctl daemon-reload 
systemctl restart docker


==========================================================================私服搭建begin=============================================================================
/etc/docker/daemon.json 文件配置
{
  "bip":"172.17.3.1/24",
  "registry-mirrors":["https://kzorq22x.mirror.aliyuncs.com"],
  "insecure-registries":["192.168.42.111:5000"]
}

重启docker
systemctl daemon-reload 
systemctl restart docker

启动私服仓库：
docker run -d --name myregistry -p 5000:5000 registry
打标签：
docker tag hello-world 192.168.42.111:5000/hello-world

推送到私服：
docker push 192.168.42.111:5000/hello-world

查看镜像：
curl http://192.168.42.111:5000/v2/_catalog

查看版本：
curl http://192.168.42.111:5000/v2/hello-world/tags/list
==========================================================================私服搭建end=============================================================================






===========================================================================volue挂载begin=========================================================================
1. 比如nginx启动时加载linux目录的配置文件： 
docker run -d --name mynginx -p 80:80 -v /soft/nginx/conf/:/etc/nginx/conf.d nginx

可以使用docker inspect containerId 查看挂载对应关系

2. 为了统一管理数据挂载， 真实使用场景中使用一个运行的容器来统一管理挂载， 比如hello-world容器
   docker run -d --name myvolume -v /soft/nginx/conf/:/etc/nginx/conf.d nginx  /docker/mysql/conf:/etc/mysql hello-world
   启动容器时  docker run -d --name mynginx -p 80:80 -volumes-from myvolume nginx
   
   删除数据卷   docker rm -v myvolume
   
===========================================================================volue挂载end=========================================================================






===========================================================================docker compose begin=========================================================================
1. docker compose使用场景： 在单节点搭建多个服务时
2.安装
   sudo curl -L https://github.com/docker/compose/releases/download/1.17.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose        
   sudo chmod +x /usr/local/bin/docker-compose
   docker-compose.yaml文件名称不能变， 里面定义服务参数信息， 包含启动顺序，端口映射， 环境变量， 开机启动， 容器启动命令，指定服务的镜像等。  疑问：该文件放置位置在哪？
3. 启动：
   docker-compose 的命令与 docker 命令极为相似，用法上没有区别，下面列出它特有的 几种命令： 
   up 创建并启动容器：docker-compose up -d --scale 服务名=数字 ---------- d 表示后台运行，scale 是表示对应的服务同时启动几个容器， 多实例场景不能再配置端口映射，此时可以使用niginx实现多实例
   down 停止并删除容器： docker-compose down ---------- 会停掉容器，并删除掉容器。如果不希望删除容器，请使用 stop
   

===========================================================================docker compose end=========================================================================





===========================================================================docker swarm begin=========================================================================
   docker swarm提供了docker的集群管理方式， 当前逐渐被k8s替代
===========================================================================docker swarm end=========================================================================




===========================================================================k8 begin=========================================================================

===========================================================================k8 end=========================================================================


